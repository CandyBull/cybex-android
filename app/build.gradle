apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion 26
    buildToolsVersion '27.0.3'

    defaultConfig {
        applicationId "com.cybexmobile"
        minSdkVersion 22
        targetSdkVersion 26
        versionCode 1
        versionName "1.0.1"
//        ndk {
//            abiFilters "armeabi-v7a", "x86"
//        }
        multiDexEnabled  true
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
    lintOptions {
        abortOnError false
    }
    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    implementation 'com.android.support:design:26.1.0'
    implementation 'com.android.support:support-vector-drawable:26.1.0'
    implementation 'com.android.support:support-v4:26.1.0'
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.squareup.picasso:picasso:2.71828'
    implementation 'com.g00fy2:versioncompare:1.2.7'
    implementation 'com.google.code.gson:gson:2.8.1'
    implementation 'com.google.guava:guava:23.0-android'
    implementation "com.android.support:cardview-v7:26.1.0"
    implementation 'com.android.support:recyclerview-v7:26.1.0'
    implementation 'org.greenrobot:eventbus:3.0.0'
    implementation 'me.grantland:autofittextview:0.2.+'
    implementation 'info.hoang8f:android-segmented:1.0.6'
    implementation 'com.pixplicity.sharp:library:1.1.0'
    implementation 'com.madgag.spongycastle:core:1.56.0.0'
    implementation 'com.madgag.spongycastle:prov:1.56.0.0'
    implementation 'com.madgag.spongycastle:pkix:1.51.0.0'
    implementation 'com.madgag.spongycastle:pg:1.51.0.0'
    implementation 'org.bitcoinj:bitcoinj-core:0.14.7'
    implementation 'com.github.bilthon:graphenej:0.4.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.5.1'
    implementation 'com.pixplicity.sharp:library:1.1.0'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.5'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'com.kaopiz:kprogresshud:1.0.2'
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'org.decimal4j:decimal4j:1.0.3'
    implementation project(':MPChartLib')
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
